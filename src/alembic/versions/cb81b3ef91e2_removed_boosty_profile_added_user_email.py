"""Removed boosty profile; Added user email

Revision ID: cb81b3ef91e2
Revises: b6be0d5a8281
Create Date: 2024-03-29 01:48:26.803340

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "cb81b3ef91e2"
down_revision: Union[str, None] = "b6be0d5a8281"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_emails",
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.telegram_id"],
        ),
        sa.PrimaryKeyConstraint("email"),
    )
    op.drop_constraint(
        "verification_codes_assigned_to_profile_id_fkey", "verification_codes", type_="foreignkey"
    )
    op.drop_column("verification_codes", "assigned_to_profile_id")
    op.drop_table("boosty_profiles")
    op.drop_table("boosty_subscription_levels")
    op.add_column("verification_codes", sa.Column("email", sa.String(), nullable=False))
    op.create_index(
        op.f("ix_verification_codes_value"), "verification_codes", ["value"], unique=False
    )
    op.create_foreign_key(None, "verification_codes", "user_emails", ["email"], ["email"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "verification_codes",
        sa.Column("assigned_to_profile_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "verification_codes", type_="foreignkey")
    op.create_foreign_key(
        "verification_codes_assigned_to_profile_id_fkey",
        "verification_codes",
        "boosty_profiles",
        ["assigned_to_profile_id"],
        ["profile_id"],
    )
    op.drop_index(op.f("ix_verification_codes_value"), table_name="verification_codes")
    op.drop_column("verification_codes", "email")
    op.create_table(
        "boosty_profiles",
        sa.Column("profile_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("level_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("next_pay_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("banned", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["level_id"],
            ["boosty_subscription_levels.level_id"],
            name="boosty_profiles_level_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.telegram_id"], name="boosty_profiles_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("profile_id", name="boosty_profiles_pkey"),
    )
    op.create_table(
        "boosty_subscription_levels",
        sa.Column("level_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("price", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_archived", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("level_id", name="boosty_subscription_levels_pkey"),
    )
    op.drop_table("user_emails")
    # ### end Alembic commands ###
